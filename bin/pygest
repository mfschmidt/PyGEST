#!/usr/bin/env python3

""" pygest

    A command-line interface to the PyGEST library.

    commands:

        push : maximize the Mantel correlation between expression-similarity and a comparator matrix

            $ pygest push H03511009 L --minmax max
            $ pygest push H03511009 L --data /var/alt_data --samples cortical --approach exhaustive

        push : minimize the Mantel r-values between expression and a comparator matrix

            $ pygest push H03511009 L --minmax min

        order : order probes by their contribution to the r-value between expression-similarity and a comparator matrix

            $ pygest order H03511009 L --comparator dist

"""

import os
import sys
import argparse
import pkg_resources

from pygest.cmdline import Split, Push, Move, Csv2df, Ktau, Status


def main():
    # PyGEST likes to manage its own threads since it knows how it's distributing them.
    if 'OPENBLAS_NUM_THREADS' not in os.environ:
        os.environ['OPENBLAS_NUM_THREADS'] = '1'

    # Collect commands and route them to the appropriate code.
    parser, arguments = parse_args()

    command = arguments.command.lower()
    if command == 'version':
        print_version()
        return 0
    elif command == 'csv2df':
        return Csv2df(arguments.command_specific_arguments).run()
    elif command == 'ktau':
        return Ktau(arguments.command_specific_arguments).run()
    elif command == 'status':
        return Status(arguments.command_specific_arguments).run()
    elif command == 'split':
        return Split(arguments.command_specific_arguments).run()
    elif command == 'order':
        return Push(arguments.command_specific_arguments).do_order()
    elif command == 'push':
        return Push(arguments.command_specific_arguments).run()
    elif command == 'move':
        return Move(arguments.command_specific_arguments).run()
    else:
        print("I don't recognize the command, '{}'".format(command))


def parse_args():
    """ Grab the command and pass the rest along. """

    parser = argparse.ArgumentParser(description="PyGEST command-line interface")
    # Argparse can't seem to grab optional arguments from the end here, then avoid passing them along in
    # 'command_specific_arguments'. So all commands need to handle their own -v and --log and --data.
    # I can't think of a DRY way to handle this without a log of class overhead. But that's the next step.
    parser.add_argument("command",
                        help="What you would like PyGEST to do.")
    parser.add_argument("command_specific_arguments", nargs=argparse.REMAINDER,
                        help="further command-specific arguments")

    args = parser.parse_args()
    args.verbose = True

    if args.command in ["push", "order", "status", "split", "push", "move"]:
        if "data" not in args or args.data == "NONE":
            if "PYGEST_DATA" in os.environ:
                args.data = os.environ['PYGEST_DATA']
            else:
                print("I don't know where to find data. Try one of the following, with your own path:")
                print("")
                print("    $ pygest push {} --data /home/mike/ge_data".format(" ".join(sys.argv[1:])))
                print("")
                print("or, even better, set it in your environment (use ~/.bashrc as a permanent solution)")
                print("")
                print("    $ export PYGEST_DATA=/home/mike/ge_data")
                print("    $ pygest push {}".format(" ".join(sys.argv[1:])))
                print("")
                sys.exit(1)

    return parser, args


def print_version():
    print("PyGEST v{}".format(pkg_resources.require("pygest")[0].version))


if __name__ == "__main__":
    sys.exit(main())
